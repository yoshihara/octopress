---
layout: post
title: Pull Requestとかバグのパッチをもらったときのレビュー手順
date: 2013-11-12 00:07
comments: true
categories: 
---

## はじめに

今の職場でPull Request（以下、PR）をよく使っています。（前職でも使っていましたが、今の職場の方が回数が多いです。）コードレビューでPRを使っています。

そこで、PRを確認するときの手順を説明してみます。前職ではバグ修正のパッチ（以下ではPRとまとめます）を取り込むときに次のことを確認していたので、コードレビューでもバグ修正に対してもどちらでも使えると思っています。（ただ、一部、スキップできそうな手順もあります。）

## レビュー手順概要

PRを見るときには、次の4点を確認します。なお、PRの目的は把握済みであるという前提で進みます。またPull Requestの方は機能追加が目的であるという仮定のもと進みます。

1. PRを取り込む前にPRの目的のものが本当にないのか（バグはあるか）
+ そのPRのコードそのものに問題がないか
+ PRがある状態での動作に問題はないか（機能がどう変わったか、バグが直ったか）
+ テストに影響はないか

それぞれ解説します。

## PRを取り込む前にPRの目的のものが本当にないのか（バグはあるか）

ある機能についてPRされたなら、その機能が現状（PRを取り込む前）に本当にないのかを確認します。これは、把握済みのことも多いのでスキップする手順かもしれません。特に、業務でなら存在しない機能であることを前提に実装してPRしているはずなので、まずない話ではあります。（少なくとも私の場合はそうです。）

バグの場合は指摘されたバグが本当に再現するかどうかを確認します。バグの場合は把握していない場合も多いので必ず確認します。また、ここでバグ確認手順を作っておくと後で使えます。

もし仮に、機能があるならPRを受け取る必要もないですし、バグがないならパッチを取り込む必要もないです。そこをはっきりさせるのがこの手順の目的です。

## そのPRのコードそのものに問題はないか

次にコードを見ます。目でコードがちゃんと動きそうか確認します。あとはコーディングスタイルがどうとかも見ます。（ただ、ここで指摘するより取り込んだ後に自分で直したほうがいいかもしれませんが）もし何か問題があったらコメントを入れてPRしてくれた人に返します。

## PRがある状態での動作に問題はないか（機能がどう変わったか、バグが直ったか）

PRのブランチに移動してみて、実際に動かします。機能の追加の場合はその機能がちゃんと動くか確認し、バグの場合はバグが発生しないことを確認します。1つ目の項目でバグ確認手順をとっておいた場合、それを使うことで、PRを取り込む前にあったバグが取り込むと発生しないことを確実に確認できます。

テストで全て確認できるならいいのかな……。（まだ迷っているところ）

## テストに影響はないか

テストを走らせます。その機能単独ではよくても、他の機能に影響がないかを調べるためです。テスト大事。

また、追加してもらった機能orバグに対応するテストがない場合は自分で書くかPRしてくれた人にコメントします。（業務の場合はコメントして書いてもらうパターンだと思います。その状況になったことがないのでわかりません）


## おわりに

前職での手順をもとに、現在よく行っているコードレビューも合わせて説明しました。


メモ：（新しい職の話は試用期間終了後の名刺をもらってから書く予定）
